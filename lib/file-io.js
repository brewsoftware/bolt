"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var fs = require('fs');
var util = require('./util');
var hasXMLHttpRequest = typeof global !== 'undefined' && global['XMLHttpRequest'] !== undefined;
function readJSONFile(path, fnFallback) {
    return readFile(path)
        .then(function (response) {
        return JSON.parse(response.content);
    })
        .catch(function (error) {
        if (error.code === 'ENOENT' && typeof fnFallback === 'function') {
            return fnFallback();
        }
        throw error;
    });
}
exports.readJSONFile = readJSONFile;
function writeJSONFile(path, data) {
    return writeFile(path, util.prettyJSON(data));
}
exports.writeJSONFile = writeJSONFile;
function readFile(path) {
    return hasXMLHttpRequest ? request('GET', path) : readFS(path);
}
exports.readFile = readFile;
function writeFile(path, data) {
    return hasXMLHttpRequest ? request('PUT', path, data) : writeFS(path, data);
}
exports.writeFile = writeFile;
function request(method, url, data) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.open(method, '/' + url);
        req.onload = function () {
            if (req.status === 200) {
                resolve({ content: req.response, url: url });
            }
            else {
                reject(new Error(url + " " + req.statusText));
            }
        };
        req.onerror = function () {
            reject(new Error(url + " Network Error"));
        };
        if (data) {
            req.setRequestHeader('Content-Type', 'text');
        }
        req.send(data);
    });
}
function readFS(path) {
    return new Promise(function (resolve, reject) {
        fs.readFile(path, { encoding: 'utf8' }, function (error, data) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: data });
        });
    });
}
function writeFS(path, data) {
    return new Promise(function (resolve, reject) {
        fs.writeFile(path, data, { encoding: 'utf8' }, function (error) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: "ok" });
        });
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsZ0JBQWdCLElBQVk7SUFDMUIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU07UUFDekMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLEVBQUUsVUFBUyxLQUFLLEVBQUUsSUFBSTtZQUN4RCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDZCxNQUFNLENBQUM7WUFDVCxDQUFDO1lBQ0QsT0FBTyxDQUFDLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELGlCQUFpQixJQUFZLEVBQUUsSUFBUztJQUN0QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtRQUN6QyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLEVBQUUsVUFBUyxLQUFLO1lBQ3pELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNkLE1BQU0sQ0FBQztZQUNULENBQUM7WUFDRCxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6ImZpbGUtaW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xyXG5cclxuY29uc3QgaGFzWE1MSHR0cFJlcXVlc3QgPVxyXG4gIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmICg8YW55PiBnbG9iYWwpWydYTUxIdHRwUmVxdWVzdCddICE9PSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRGaWxlUmVzdWx0IHtcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkSlNPTkZpbGUocGF0aDogc3RyaW5nLCBmbkZhbGxiYWNrPzogKCkgPT4gYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICByZXR1cm4gcmVhZEZpbGUocGF0aClcclxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlOiBSZWFkRmlsZVJlc3VsdCkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZS5jb250ZW50KTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdFTk9FTlQnICYmIHR5cGVvZiBmbkZhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIGZuRmFsbGJhY2soKTtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVKU09ORmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcclxuICByZXR1cm4gd3JpdGVGaWxlKHBhdGgsIHV0aWwucHJldHR5SlNPTihkYXRhKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFJlYWRGaWxlUmVzdWx0PiB7XHJcbiAgcmV0dXJuIGhhc1hNTEh0dHBSZXF1ZXN0ID8gcmVxdWVzdCgnR0VUJywgcGF0aCkgOiByZWFkRlMocGF0aCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZpbGUocGF0aDogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPFJlYWRGaWxlUmVzdWx0PiB7XHJcbiAgcmV0dXJuIGhhc1hNTEh0dHBSZXF1ZXN0ID8gcmVxdWVzdCgnUFVUJywgcGF0aCwgZGF0YSkgOiB3cml0ZUZTKHBhdGgsIGRhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgZGF0YT86IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBsZXQgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgcmVxLm9wZW4obWV0aG9kLCAnLycgKyB1cmwpO1xyXG5cclxuICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgIHJlc29sdmUoe2NvbnRlbnQ6IHJlcS5yZXNwb25zZSwgdXJsOiB1cmx9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QobmV3IEVycm9yKHVybCArIFwiIFwiICsgcmVxLnN0YXR1c1RleHQpKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZWplY3QobmV3IEVycm9yKHVybCArIFwiIE5ldHdvcmsgRXJyb3JcIikpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXEuc2VuZChkYXRhKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZEZTKHBhdGg6IHN0cmluZyk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBmcy5yZWFkRmlsZShwYXRoLCB7ZW5jb2Rpbmc6ICd1dGY4J30sIGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlc29sdmUoe3VybDogcGF0aCwgY29udGVudDogZGF0YX0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyaXRlRlMocGF0aDogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPFJlYWRGaWxlUmVzdWx0PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgZnMud3JpdGVGaWxlKHBhdGgsIGRhdGEsIHtlbmNvZGluZzogJ3V0ZjgnfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcmVzb2x2ZSh7dXJsOiBwYXRoLCBjb250ZW50OiBcIm9rXCJ9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbiJdfQ==
