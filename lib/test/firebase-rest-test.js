"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var rest = require('../firebase-rest');
var secrets = require('../../auth-secrets');
var chai_1 = require('chai');
var TEST_LOCATION = '/rest-test';
suite("Firebase REST Tests", function () {
    var client = new rest.Client(secrets.APP);
    suiteSetup(function () {
        var adminClient = new rest.Client(secrets.APP, secrets.SECRET);
        return adminClient.put(rest.RULES_LOCATION, {
            rules: {
                ".read": true,
                ".write": false,
                "rest-test": {
                    ".write": true
                }
            }
        });
    });
    test("Read location", function () {
        return client.get(TEST_LOCATION);
    });
    test("Write data", function () {
        var tests = [
            { location: 'string', value: 'Hello, world.' },
            { location: 'integer', value: 123 },
            { location: 'number', value: 123.456 },
            { location: 'boolean', value: false },
            { location: 'object', value: { this: 1, that: 'other' } },
            { location: 'TIMESTAMP', value: rest.TIMESTAMP },
        ];
        var results = [];
        for (var i = 0; i < tests.length; i++) {
            var t = tests[i];
            results.push(client.put(TEST_LOCATION + '/types/' + t.location, t.value));
        }
        return Promise.all(results);
    });
    test("Invalid location", function () {
        return client.get('../../illegal')
            .catch(function (error) {
            return true;
        });
    });
    test("PushID", function () {
        var id1 = rest.generatePushID();
        var id2 = rest.generatePushID();
        chai_1.assert.equal(id1.length, 20);
        chai_1.assert.notEqual(id1, id2);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZmlyZWJhc2UtcmVzdC10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILElBQVksSUFBSSxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFDekMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDNUMscUJBQXFCLE1BQU0sQ0FBQyxDQUFBO0FBRTVCLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUVqQyxLQUFLLENBQUMscUJBQXFCLEVBQUU7SUFDM0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUxQyxVQUFVLENBQUM7UUFDVCxJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ3BCLElBQUksQ0FBQyxjQUFjLEVBQ25CO1lBQ0UsS0FBSyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFFBQVEsRUFBRSxLQUFLO2dCQUNmLFdBQVcsRUFBRTtvQkFDWCxRQUFRLEVBQUUsSUFBSTtpQkFDZjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNqQixJQUFJLEtBQUssR0FBRztZQUNWLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFO1lBQzlDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ25DLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO1lBQ3RDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ3JDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRTtZQUN2RCxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7U0FDakQsQ0FBQztRQUNGLElBQUksT0FBTyxHQUFzQixFQUFFLENBQUM7UUFDcEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUUsQ0FBQztRQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQzthQUMvQixLQUFLLENBQUMsVUFBUyxLQUFLO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDaEMsYUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLGFBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9maXJlYmFzZS1yZXN0LXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCAqIGFzIHJlc3QgZnJvbSAnLi4vZmlyZWJhc2UtcmVzdCc7XHJcbmxldCBzZWNyZXRzID0gcmVxdWlyZSgnLi4vLi4vYXV0aC1zZWNyZXRzJyk7XHJcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcclxuXHJcbmxldCBURVNUX0xPQ0FUSU9OID0gJy9yZXN0LXRlc3QnO1xyXG5cclxuc3VpdGUoXCJGaXJlYmFzZSBSRVNUIFRlc3RzXCIsIGZ1bmN0aW9uKCkge1xyXG4gIHZhciBjbGllbnQgPSBuZXcgcmVzdC5DbGllbnQoc2VjcmV0cy5BUFApO1xyXG5cclxuICBzdWl0ZVNldHVwKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGFkbWluQ2xpZW50ID0gbmV3IHJlc3QuQ2xpZW50KHNlY3JldHMuQVBQLCBzZWNyZXRzLlNFQ1JFVCk7XHJcbiAgICByZXR1cm4gYWRtaW5DbGllbnQucHV0KFxyXG4gICAgICByZXN0LlJVTEVTX0xPQ0FUSU9OLFxyXG4gICAgICB7XHJcbiAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgIFwiLnJlYWRcIjogdHJ1ZSxcclxuICAgICAgICAgIFwiLndyaXRlXCI6IGZhbHNlLFxyXG4gICAgICAgICAgXCJyZXN0LXRlc3RcIjoge1xyXG4gICAgICAgICAgICBcIi53cml0ZVwiOiB0cnVlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdChcIlJlYWQgbG9jYXRpb25cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gY2xpZW50LmdldChURVNUX0xPQ0FUSU9OKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdChcIldyaXRlIGRhdGFcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGVzdHMgPSBbXHJcbiAgICAgIHsgbG9jYXRpb246ICdzdHJpbmcnLCB2YWx1ZTogJ0hlbGxvLCB3b3JsZC4nIH0sXHJcbiAgICAgIHsgbG9jYXRpb246ICdpbnRlZ2VyJywgdmFsdWU6IDEyMyB9LFxyXG4gICAgICB7IGxvY2F0aW9uOiAnbnVtYmVyJywgdmFsdWU6IDEyMy40NTYgfSxcclxuICAgICAgeyBsb2NhdGlvbjogJ2Jvb2xlYW4nLCB2YWx1ZTogZmFsc2UgfSxcclxuICAgICAgeyBsb2NhdGlvbjogJ29iamVjdCcsIHZhbHVlOiB7dGhpczogMSwgdGhhdDogJ290aGVyJ30gfSxcclxuICAgICAgeyBsb2NhdGlvbjogJ1RJTUVTVEFNUCcsIHZhbHVlOiByZXN0LlRJTUVTVEFNUCB9LFxyXG4gICAgXTtcclxuICAgIHZhciByZXN1bHRzID0gPFByb21pc2U8c3RyaW5nPltdPltdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgdCA9IHRlc3RzW2ldO1xyXG4gICAgICByZXN1bHRzLnB1c2goY2xpZW50LnB1dChURVNUX0xPQ0FUSU9OICsgJy90eXBlcy8nICsgdC5sb2NhdGlvbiwgdC52YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiSW52YWxpZCBsb2NhdGlvblwiLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBjbGllbnQuZ2V0KCcuLi8uLi9pbGxlZ2FsJylcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiUHVzaElEXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgbGV0IGlkMSA9IHJlc3QuZ2VuZXJhdGVQdXNoSUQoKTtcclxuICAgIGxldCBpZDIgPSByZXN0LmdlbmVyYXRlUHVzaElEKCk7XHJcbiAgICBhc3NlcnQuZXF1YWwoaWQxLmxlbmd0aCwgMjApO1xyXG4gICAgYXNzZXJ0Lm5vdEVxdWFsKGlkMSwgaWQyKTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==
