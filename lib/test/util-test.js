"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var chai_1 = require('chai');
var helper = require('./test-helper');
var util = require('../util');
suite("Util", function () {
    suite("pruneEmptyChildren", function () {
        var T = (function () {
            function T() {
                this.x = 'dummy';
            }
            return T;
        }());
        var tests = [
            [{}, {}],
            [{ a: 1 }, { a: 1 }],
            [{ a: {} }, {}],
            [{ a: 1, b: {} }, { a: 1 }],
            [{ a: [] }, { a: [] }],
            [{ a: new T() }, { a: new T() }],
            [{ a: { a: { a: {} } } }, {}],
            [{ a: { a: { a: {}, b: 1 } } }, { a: { a: { b: 1 } } }],
            [{ a: 1, b: undefined }, { a: 1 }],
        ];
        helper.dataDrivenTest(tests, function (data, expect) {
            util.pruneEmptyChildren(data);
            chai_1.assert.deepEqual(data, expect);
        });
    });
    suite("pruneEmptyChildren", function () {
        var tests = [
            [{}, {}],
            [{ a: 1 }, { a: 1 }],
            [{ a: 1, dm: 2 }, { a: 1 }],
            [{ a: 1, b: { dm: 2, c: 3 } }, { a: 1, b: { c: 3 } }],
        ];
        helper.dataDrivenTest(tests, function (data, expect) {
            util.deletePropName(data, 'dm');
            chai_1.assert.deepEqual(data, expect);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoQyxhQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91dGlsLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcclxuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gJy4vdGVzdC1oZWxwZXInO1xyXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xyXG5cclxuc3VpdGUoXCJVdGlsXCIsIGZ1bmN0aW9uKCkge1xyXG4gIHN1aXRlKFwicHJ1bmVFbXB0eUNoaWxkcmVuXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgY2xhc3MgVCB7XHJcbiAgICAgIHB1YmxpYyB4ID0gJ2R1bW15JztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdGVzdHMgPSBbXHJcbiAgICAgIFsge30sIHt9IF0sXHJcbiAgICAgIFsge2E6IDF9LCB7YTogMX0gXSxcclxuICAgICAgWyB7YToge319LCB7fSBdLFxyXG4gICAgICBbIHthOiAxLCBiOiB7fX0sIHthOiAxfSBdLFxyXG4gICAgICBbIHthOiBbXX0sIHthOiBbXX0gXSxcclxuICAgICAgWyB7YTogbmV3IFQoKX0sIHthOiBuZXcgVCgpfSBdLFxyXG4gICAgICBbIHthOiB7YToge2E6IHt9fX19LCB7fSBdLFxyXG4gICAgICBbIHthOiB7YToge2E6IHt9LCBiOiAxfX19LCB7YToge2E6IHtiOiAxfX19IF0sXHJcbiAgICAgIFsge2E6IDEsIGI6IHVuZGVmaW5lZH0sIHthOiAxfSBdLFxyXG4gICAgXTtcclxuXHJcbiAgICBoZWxwZXIuZGF0YURyaXZlblRlc3QodGVzdHMsIGZ1bmN0aW9uKGRhdGE6IGFueSwgZXhwZWN0OiBhbnkpIHtcclxuICAgICAgdXRpbC5wcnVuZUVtcHR5Q2hpbGRyZW4oZGF0YSk7XHJcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwoZGF0YSwgZXhwZWN0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBzdWl0ZShcInBydW5lRW1wdHlDaGlsZHJlblwiLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciB0ZXN0cyA9IFtcclxuICAgICAgWyB7fSwge30gXSxcclxuICAgICAgWyB7YTogMX0sIHthOiAxfSBdLFxyXG4gICAgICBbIHthOiAxLCBkbTogMn0sIHthOiAxfSBdLFxyXG4gICAgICBbIHthOiAxLCBiOiB7ZG06IDIsIGM6IDN9fSwge2E6IDEsIGI6IHtjOiAzfX0gXSxcclxuICAgIF07XHJcblxyXG4gICAgaGVscGVyLmRhdGFEcml2ZW5UZXN0KHRlc3RzLCBmdW5jdGlvbihkYXRhOiBhbnksIGV4cGVjdDogYW55KSB7XHJcbiAgICAgIHV0aWwuZGVsZXRlUHJvcE5hbWUoZGF0YSwgJ2RtJyk7XHJcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwoZGF0YSwgZXhwZWN0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19
